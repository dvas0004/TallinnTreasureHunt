__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _ModuleBase2 = require(_dependencyMap[1], "./../../utils/ModuleBase");

  var _ModuleBase3 = _interopRequireDefault(_ModuleBase2);

  var _CollectionReference = require(_dependencyMap[2], "./CollectionReference");

  var _CollectionReference2 = _interopRequireDefault(_CollectionReference);

  var _DocumentReference = require(_dependencyMap[3], "./DocumentReference");

  var _DocumentReference2 = _interopRequireDefault(_DocumentReference);

  var _FieldValue = require(_dependencyMap[4], "./FieldValue");

  var _FieldValue2 = _interopRequireDefault(_FieldValue);

  var _GeoPoint = require(_dependencyMap[5], "./GeoPoint");

  var _GeoPoint2 = _interopRequireDefault(_GeoPoint);

  var _Path = require(_dependencyMap[6], "./Path");

  var _Path2 = _interopRequireDefault(_Path);

  var _WriteBatch = require(_dependencyMap[7], "./WriteBatch");

  var _WriteBatch2 = _interopRequireDefault(_WriteBatch);

  var _internals = require(_dependencyMap[8], "../../utils/internals");

  var _internals2 = _interopRequireDefault(_internals);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var FirestoreInternalModule = function (_ModuleBase) {
    _inherits(FirestoreInternalModule, _ModuleBase);

    function FirestoreInternalModule(firebaseApp) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FirestoreInternalModule);

      var _this = _possibleConstructorReturn(this, (FirestoreInternalModule.__proto__ || Object.getPrototypeOf(FirestoreInternalModule)).call(this, firebaseApp, options, true));

      _this._referencePath = new _Path2.default([]);

      _get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "addListener", _this).call(_this, _get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", _this).call(_this, 'firestore_collection_sync_event'), _this._onCollectionSyncEvent.bind(_this));

      _get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "addListener", _this).call(_this, _get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", _this).call(_this, 'firestore_document_sync_event'), _this._onDocumentSyncEvent.bind(_this));

      return _this;
    }

    _createClass(FirestoreInternalModule, [{
      key: "_onCollectionSyncEvent",
      value: function _onCollectionSyncEvent(event) {
        if (event.error) {
          this.emit(_get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", this).call(this, "onQuerySnapshotError:" + event.listenerId), event.error);
        } else {
          this.emit(_get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", this).call(this, "onQuerySnapshot:" + event.listenerId), event.querySnapshot);
        }
      }
    }, {
      key: "_onDocumentSyncEvent",
      value: function _onDocumentSyncEvent(event) {
        if (event.error) {
          this.emit(_get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", this).call(this, "onDocumentSnapshotError:" + event.listenerId), event.error);
        } else {
          this.emit(_get(FirestoreInternalModule.prototype.__proto__ || Object.getPrototypeOf(FirestoreInternalModule.prototype), "_getAppEventName", this).call(this, "onDocumentSnapshot:" + event.listenerId), event.documentSnapshot);
        }
      }
    }]);

    return FirestoreInternalModule;
  }(_ModuleBase3.default);

  FirestoreInternalModule._NAMESPACE = 'firestore';
  FirestoreInternalModule._NATIVE_MODULE = 'RNFirebaseFirestore';

  var Firestore = function (_FirestoreInternalMod) {
    _inherits(Firestore, _FirestoreInternalMod);

    function Firestore(firebaseApp) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Firestore);

      return _possibleConstructorReturn(this, (Firestore.__proto__ || Object.getPrototypeOf(Firestore)).call(this, firebaseApp, options));
    }

    _createClass(Firestore, [{
      key: "batch",
      value: function batch() {
        return new _WriteBatch2.default(this);
      }
    }, {
      key: "collection",
      value: function collection(collectionPath) {
        var path = this._referencePath.child(collectionPath);

        if (!path.isCollection) {
          throw new Error('Argument "collectionPath" must point to a collection.');
        }

        return new _CollectionReference2.default(this, path);
      }
    }, {
      key: "doc",
      value: function doc(documentPath) {
        var path = this._referencePath.child(documentPath);

        if (!path.isDocument) {
          throw new Error('Argument "documentPath" must point to a document.');
        }

        return new _DocumentReference2.default(this, path);
      }
    }, {
      key: "enablePersistence",
      value: function enablePersistence() {
        throw new Error('Persistence is enabled by default on the Firestore SDKs');
      }
    }, {
      key: "runTransaction",
      value: function runTransaction() {
        throw new Error('firebase.firestore().runTransaction() coming soon');
      }
    }, {
      key: "setLogLevel",
      value: function setLogLevel() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD(Firestore, 'setLogLevel'));
      }
    }, {
      key: "settings",
      value: function settings() {
        throw new Error('firebase.firestore().settings() coming soon');
      }
    }]);

    return Firestore;
  }(FirestoreInternalModule);

  exports.default = Firestore;
  var statics = exports.statics = {
    FieldValue: _FieldValue2.default,
    GeoPoint: _GeoPoint2.default,
    enableLogging: function enableLogging(bool) {
      if (_reactNative.NativeModules[Firestore._NATIVE_MODULE]) {
        _reactNative.NativeModules[Firestore._NATIVE_MODULE].enableLogging(bool);
      }
    }
  };
});