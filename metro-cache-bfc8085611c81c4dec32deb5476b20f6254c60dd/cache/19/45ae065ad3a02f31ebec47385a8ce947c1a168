__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/dvas0004/Dropbox/TallinnTreasureHunt/App.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _actions = require(_dependencyMap[3], "./actions");

  var _reactRedux = require(_dependencyMap[4], "react-redux");

  var _reactNativeFirebase = require(_dependencyMap[5], "react-native-firebase");

  var _reactNativeFirebase2 = _interopRequireDefault(_reactNativeFirebase);

  var _reactNativeSideMenu = require(_dependencyMap[6], "react-native-side-menu");

  var _reactNativeSideMenu2 = _interopRequireDefault(_reactNativeSideMenu);

  var _watchGeoPosition = require(_dependencyMap[7], "./components/watchGeoPosition");

  var _watchGeoPosition2 = _interopRequireDefault(_watchGeoPosition);

  var _TreasureHuntMap = require(_dependencyMap[8], "./components/TreasureHuntMap");

  var _TreasureHuntMap2 = _interopRequireDefault(_TreasureHuntMap);

  var _PuzzleView = require(_dependencyMap[9], "./components/PuzzleView");

  var _PuzzleView2 = _interopRequireDefault(_PuzzleView);

  var _InnerModal = require(_dependencyMap[10], "./components/InnerModal");

  var _InnerModal2 = _interopRequireDefault(_InnerModal);

  var _Menu = require(_dependencyMap[11], "./components/Menu");

  var _Menu2 = _interopRequireDefault(_Menu);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    App: {
      displayName: "App"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/dvas0004/Dropbox/TallinnTreasureHunt/App.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function requestLocationPermission() {
    var granted;
    return regeneratorRuntime.async(function requestLocationPermission$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return regeneratorRuntime.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {
              'title': 'Tallinn Treasure Hunt',
              'message': 'Tallinn Treasure Hunt needs access to your location ' + 'so you can find puzzles.'
            }));

          case 3:
            granted = _context.sent;

            if (granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED) {
              console.log("You can use location");
            } else {
              console.log("Location permission denied");
            }

            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            console.warn(_context.t0);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[0, 7]]);
  }

  var App = _wrapComponent("App")((_temp = _class = function (_Component) {
    _inherits(App, _Component);

    function App(props) {
      _classCallCheck(this, App);

      var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

      _this.onMenuItemSelected = function (item) {
        _this.setState({
          sideMenuIsOpen: false,
          curView: item
        });

        _this.openModal();
      };

      _this.puzzlesRef = _reactNativeFirebase2.default.database().ref();

      _this.puzzlesRef.keepSynced(true);

      _this.state = {
        user: _this.props.appData && _this.props.appData.user || null
      };
      return _this;
    }

    _createClass(App, [{
      key: "listenForPuzzles",
      value: function listenForPuzzles(puzzlesRef) {
        var _this2 = this;

        puzzlesRef.on('value', function (snap) {
          console.log("Got Database Snapshot:");
          console.log(snap.val());

          _this2.props.puzzleData(snap.val());

          console.log("Database Children:");
          snap.forEach(function (child) {
            console.log(child.val());
          });
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        requestLocationPermission();

        _reactNativeFirebase2.default.auth().signInAnonymously().then(function () {
          var currentUser = _reactNativeFirebase2.default.auth().currentUser;

          var userID = currentUser.uid;

          _this3.props.userData(userID);

          console.log("Current User:");
          console.log(userID);

          _this3.listenForPuzzles(_this3.puzzlesRef);
        }).catch(function (err) {
          console.log(err);
        });
      }
    }, {
      key: "openModal",
      value: function openModal() {
        console.log("Opening Modal...");
        this.props.changeModal(true);
      }
    }, {
      key: "closeModal",
      value: function closeModal() {
        console.log("Closing Modal...");
        this.props.changeModal(false);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var menu = _react3.default.createElement(_Menu2.default, {
          onItemSelected: this.onMenuItemSelected,
          userName: this.props.appData.user,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 133
          }
        });

        var curView = this.state.curView || null;
        var showModal = this.props.appData && this.props.appData.modalVisible || false;

        var modalView = _react3.default.createElement(
          _reactNative.Modal,
          {
            visible: showModal,
            animationType: 'slide',
            onRequestClose: function onRequestClose() {
              return _this4.closeModal();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 138
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.modalContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 143
              }
            },
            _react3.default.createElement(_InnerModal2.default, {
              curView: curView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 144
              }
            })
          )
        );

        return _react3.default.createElement(
          _reactNativeSideMenu2.default,
          {
            menu: menu,
            isOpen: this.state.sideMenuIsOpen || false,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 150
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                flex: 1,
                flexDirection: 'column',
                backgroundColor: 'white'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 155
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.textcontainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 157
                }
              },
              _react3.default.createElement(_reactNative.Image, {
                style: styles.icon,
                source: require(_dependencyMap[12], './img/logo.png'),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 159
                }
              }),
              _react3.default.createElement(
                _reactNative.Text,
                {
                  style: {
                    fontWeight: "bold",
                    fontSize: 20
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 164
                  }
                },
                "Welcome to the Tallinn Treasure Hunt!"
              )
            ),
            _react3.default.createElement(_PuzzleView2.default, {
              style: styles.textcontainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 170
              }
            }),
            _react3.default.createElement(_watchGeoPosition2.default, {
              style: styles.textcontainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 171
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.container,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 175
                }
              },
              _react3.default.createElement(_TreasureHuntMap2.default, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 177
                }
              })
            ),
            modalView
          )
        );
      }
    }]);

    return App;
  }(_react2.Component), _class.navigationOptions = {
    title: 'Welcome'
  }, _temp));

  var styles = _reactNative.StyleSheet.create({
    textcontainer: {
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'white'
    },
    container: {
      height: 400,
      width: 400,
      justifyContent: 'center',
      alignItems: 'center'
    },
    modalContainer: {
      flex: 1,
      justifyContent: 'center'
    },
    icon: {
      width: 64,
      height: 64,
      padding: 10
    }
  });

  function mapStateToProps(state) {
    return {
      appData: state.appData
    };
  }

  function mapDispatchToProps(dispatch) {
    return {
      puzzleData: function puzzleData(data) {
        return dispatch((0, _actions.puzzleData)(data));
      },
      userData: function userData(data) {
        return dispatch((0, _actions.userData)(data));
      },
      changeModal: function changeModal(data) {
        return dispatch((0, _actions.changeModal)(data));
      }
    };
  }

  exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(App);
});