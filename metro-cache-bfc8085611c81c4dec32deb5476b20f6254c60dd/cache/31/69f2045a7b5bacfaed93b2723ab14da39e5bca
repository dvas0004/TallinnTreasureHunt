__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _log = require(_dependencyMap[1], "./log");

  var _log2 = _interopRequireDefault(_log);

  var _internals = require(_dependencyMap[2], "./internals");

  var _internals2 = _interopRequireDefault(_internals);

  var _firebase = require(_dependencyMap[3], "../modules/core/firebase");

  var _firebase2 = _interopRequireDefault(_firebase);

  var _utils = require(_dependencyMap[4], "../utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var logs = {};
  var MULTI_APP_MODULES = ['auth', 'database', 'firestore', 'storage'];
  var NATIVE_MODULE_EVENTS = {
    Storage: ['storage_event', 'storage_error'],
    Auth: ['auth_state_changed', 'phone_auth_state_changed'],
    Database: ['database_transaction_event'],
    Firestore: ['firestore_collection_sync_event', 'firestore_document_sync_event']
  };
  var DEFAULTS = {
    Database: {
      persistence: false
    }
  };

  var ModuleBase = function () {
    function ModuleBase(firebaseApp, options) {
      var withEventEmitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      _classCallCheck(this, ModuleBase);

      this._module = this.constructor._NATIVE_MODULE.replace('RNFirebase', '');
      this._firebaseApp = firebaseApp;
      this._appName = firebaseApp._name;
      this._namespace = this._appName + ":" + this._module;
      this._options = _extends({}, DEFAULTS[this._module] || {}, options);
      var nativeModule = _reactNative.NativeModules[this.constructor._NATIVE_MODULE];

      if (!nativeModule && !this.constructor._NATIVE_DISABLED) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_MODULE(this.constructor._NAMESPACE, this.constructor._NATIVE_MODULE));
      }

      if (!MULTI_APP_MODULES.includes(this._module.toLowerCase())) {
        this._native = nativeModule;
      } else {
        this._native = (0, _utils.nativeWithApp)(this._appName, nativeModule);
      }

      if (withEventEmitter) {
        this._setupEventEmitter(nativeModule, this._module);
      }
    }

    _createClass(ModuleBase, [{
      key: "_setupEventEmitter",
      value: function _setupEventEmitter(nativeModule, moduleName) {
        this._eventEmitter = _firebase2.default._getOrSetNativeEmitter(this._appName + "-" + this._module, nativeModule);
        var events = NATIVE_MODULE_EVENTS[moduleName];

        if (events && events.length) {
          for (var i = 0, len = events.length; i < len; i++) {
            _firebase2.default._subscribeForDistribution(events[i], this._eventEmitter);
          }
        }
      }
    }, {
      key: "_getAppEventName",
      value: function _getAppEventName(eventName) {
        return this._appName + "-" + eventName;
      }
    }, {
      key: "hasListeners",
      value: function hasListeners(eventType) {
        var subscriptions = _internals2.default.SharedEventEmitter._subscriber.getSubscriptionsForType(eventType);

        return subscriptions && subscriptions.length;
      }
    }, {
      key: "app",
      get: function get() {
        return this._firebaseApp;
      }
    }, {
      key: "log",
      get: function get() {
        if (logs[this._namespace]) return logs[this._namespace];
        return logs[this._namespace] = _log2.default.createLogger("\uD83D\uDD25 " + this._namespace.toUpperCase());
      }
    }, {
      key: "sharedEventEmitter",
      get: function get() {
        return _internals2.default.SharedEventEmitter;
      }
    }, {
      key: "addListener",
      get: function get() {
        return _internals2.default.SharedEventEmitter.addListener.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "once",
      get: function get() {
        return _internals2.default.SharedEventEmitter.once.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "on",
      get: function get() {
        return _internals2.default.SharedEventEmitter.addListener.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "emit",
      get: function get() {
        return _internals2.default.SharedEventEmitter.emit.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "listeners",
      get: function get() {
        return _internals2.default.SharedEventEmitter.listeners.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "removeListener",
      get: function get() {
        return _internals2.default.SharedEventEmitter.removeListener.bind(_internals2.default.SharedEventEmitter);
      }
    }, {
      key: "removeAllListeners",
      get: function get() {
        return _internals2.default.SharedEventEmitter.removeAllListeners.bind(_internals2.default.SharedEventEmitter);
      }
    }]);

    return ModuleBase;
  }();

  exports.default = ModuleBase;
});