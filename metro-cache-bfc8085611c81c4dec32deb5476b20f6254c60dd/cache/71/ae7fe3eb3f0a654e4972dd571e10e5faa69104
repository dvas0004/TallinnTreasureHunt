__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _DocumentReference = require(_dependencyMap[0], "./DocumentReference");

  var _DocumentReference2 = _interopRequireDefault(_DocumentReference);

  var _Path = require(_dependencyMap[1], "./Path");

  var _Path2 = _interopRequireDefault(_Path);

  var _serialize = require(_dependencyMap[2], "./utils/serialize");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var DocumentSnapshot = function () {
    function DocumentSnapshot(firestore, nativeData) {
      _classCallCheck(this, DocumentSnapshot);

      this._data = (0, _serialize.parseNativeMap)(firestore, nativeData.data);
      this._metadata = nativeData.metadata;
      this._ref = new _DocumentReference2.default(firestore, _Path2.default.fromName(nativeData.path));
    }

    _createClass(DocumentSnapshot, [{
      key: "data",
      value: function data() {
        return this._data;
      }
    }, {
      key: "get",
      value: function get(fieldPath) {
        return this._data ? this._data[fieldPath] : undefined;
      }
    }, {
      key: "exists",
      get: function get() {
        return this._data !== undefined;
      }
    }, {
      key: "id",
      get: function get() {
        return this._ref.id;
      }
    }, {
      key: "metadata",
      get: function get() {
        return this._metadata;
      }
    }, {
      key: "ref",
      get: function get() {
        return this._ref;
      }
    }]);

    return DocumentSnapshot;
  }();

  exports.default = DocumentSnapshot;
});