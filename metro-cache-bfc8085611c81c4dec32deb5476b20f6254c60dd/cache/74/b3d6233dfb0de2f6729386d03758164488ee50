__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _reference = require(_dependencyMap[1], "./reference");

  var _reference2 = _interopRequireDefault(_reference);

  var _ModuleBase2 = require(_dependencyMap[2], "./../../utils/ModuleBase");

  var _ModuleBase3 = _interopRequireDefault(_ModuleBase2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var FirebaseStorage = _reactNative.NativeModules.RNFirebaseStorage;

  var Storage = function (_ModuleBase) {
    _inherits(Storage, _ModuleBase);

    function Storage(firebaseApp) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Storage);

      var _this = _possibleConstructorReturn(this, (Storage.__proto__ || Object.getPrototypeOf(Storage)).call(this, firebaseApp, options, true));

      _this.addListener(_this._getAppEventName('storage_event'), _this._handleStorageEvent.bind(_this));

      _this.addListener(_this._getAppEventName('storage_error'), _this._handleStorageEvent.bind(_this));

      return _this;
    }

    _createClass(Storage, [{
      key: "ref",
      value: function ref(path) {
        return new _reference2.default(this, path);
      }
    }, {
      key: "refFromURL",
      value: function refFromURL(url) {
        return new _reference2.default(this, "url::" + url);
      }
    }, {
      key: "setMaxOperationRetryTime",
      value: function setMaxOperationRetryTime(time) {
        this._native.setMaxOperationRetryTime(time);
      }
    }, {
      key: "setMaxUploadRetryTime",
      value: function setMaxUploadRetryTime(time) {
        this._native.setMaxUploadRetryTime(time);
      }
    }, {
      key: "setMaxDownloadRetryTime",
      value: function setMaxDownloadRetryTime(time) {
        this._native.setMaxDownloadRetryTime(time);
      }
    }, {
      key: "_getSubEventName",
      value: function _getSubEventName(path, eventName) {
        return this._getAppEventName(path + "-" + eventName);
      }
    }, {
      key: "_handleStorageEvent",
      value: function _handleStorageEvent(event) {
        var path = event.path,
            eventName = event.eventName;
        var body = event.body || {};
        this.log.debug('_handleStorageEvent: ', path, eventName, body);
        this.emit(this._getSubEventName(path, eventName), body);
      }
    }, {
      key: "_handleStorageError",
      value: function _handleStorageError(err) {
        var path = err.path,
            eventName = err.eventName;
        var body = err.body || {};
        this.log.debug('_handleStorageError ->', err);
        this.emit(this._getSubEventName(path, eventName), body);
      }
    }, {
      key: "_addListener",
      value: function _addListener(path, eventName, cb) {
        this.on(this._getSubEventName(path, eventName), cb);
      }
    }, {
      key: "_removeListener",
      value: function _removeListener(path, eventName, origCB) {
        this.removeListener(this._getSubEventName(path, eventName), origCB);
      }
    }]);

    return Storage;
  }(_ModuleBase3.default);

  Storage._NAMESPACE = 'storage';
  Storage._NATIVE_MODULE = 'RNFirebaseStorage';
  exports.default = Storage;
  var statics = exports.statics = {
    TaskEvent: {
      STATE_CHANGED: 'state_changed'
    },
    TaskState: {
      RUNNING: 'running',
      PAUSED: 'paused',
      SUCCESS: 'success',
      CANCELLED: 'cancelled',
      ERROR: 'error'
    },
    Native: FirebaseStorage ? {
      MAIN_BUNDLE_PATH: FirebaseStorage.MAIN_BUNDLE_PATH,
      CACHES_DIRECTORY_PATH: FirebaseStorage.CACHES_DIRECTORY_PATH,
      DOCUMENT_DIRECTORY_PATH: FirebaseStorage.DOCUMENT_DIRECTORY_PATH,
      EXTERNAL_DIRECTORY_PATH: FirebaseStorage.EXTERNAL_DIRECTORY_PATH,
      EXTERNAL_STORAGE_DIRECTORY_PATH: FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH,
      TEMP_DIRECTORY_PATH: FirebaseStorage.TEMP_DIRECTORY_PATH,
      LIBRARY_DIRECTORY_PATH: FirebaseStorage.LIBRARY_DIRECTORY_PATH,
      FILETYPE_REGULAR: FirebaseStorage.FILETYPE_REGULAR,
      FILETYPE_DIRECTORY: FirebaseStorage.FILETYPE_DIRECTORY
    } : {}
  };
});