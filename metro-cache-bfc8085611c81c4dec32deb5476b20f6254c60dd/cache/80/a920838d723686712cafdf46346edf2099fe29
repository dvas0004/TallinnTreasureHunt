__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _internals = require(_dependencyMap[1], "../../utils/internals");

  var _internals2 = _interopRequireDefault(_internals);

  var _firebaseApp = require(_dependencyMap[2], "./firebase-app");

  var _firebaseApp2 = _interopRequireDefault(_firebaseApp);

  var _utils = require(_dependencyMap[3], "../../utils");

  var _admob = require(_dependencyMap[4], "../admob");

  var _admob2 = _interopRequireDefault(_admob);

  var _auth = require(_dependencyMap[5], "../auth");

  var _auth2 = _interopRequireDefault(_auth);

  var _analytics = require(_dependencyMap[6], "../analytics");

  var _analytics2 = _interopRequireDefault(_analytics);

  var _config = require(_dependencyMap[7], "../config");

  var _config2 = _interopRequireDefault(_config);

  var _crash = require(_dependencyMap[8], "../crash");

  var _crash2 = _interopRequireDefault(_crash);

  var _crashlytics = require(_dependencyMap[9], "../fabric/crashlytics");

  var _crashlytics2 = _interopRequireDefault(_crashlytics);

  var _database = require(_dependencyMap[10], "../database");

  var _database2 = _interopRequireDefault(_database);

  var _firestore = require(_dependencyMap[11], "../firestore");

  var _firestore2 = _interopRequireDefault(_firestore);

  var _links = require(_dependencyMap[12], "../links");

  var _links2 = _interopRequireDefault(_links);

  var _messaging = require(_dependencyMap[13], "../messaging");

  var _messaging2 = _interopRequireDefault(_messaging);

  var _perf = require(_dependencyMap[14], "../perf");

  var _perf2 = _interopRequireDefault(_perf);

  var _storage = require(_dependencyMap[15], "../storage");

  var _storage2 = _interopRequireDefault(_storage);

  var _utils2 = require(_dependencyMap[16], "../utils");

  var _utils3 = _interopRequireDefault(_utils2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;

  var FirebaseCore = function () {
    function FirebaseCore() {
      _classCallCheck(this, FirebaseCore);

      this._nativeEmitters = {};
      this._nativeSubscriptions = {};

      if (!FirebaseCoreModule) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_CORE);
      }

      this._initializeNativeApps();

      this.admob = this._appNamespaceOrStatics(_admob.statics, _admob2.default);
      this.analytics = this._appNamespaceOrStatics(_analytics.statics, _analytics2.default);
      this.auth = this._appNamespaceOrStatics(_auth.statics, _auth2.default);
      this.config = this._appNamespaceOrStatics(_config.statics, _config2.default);
      this.crash = this._appNamespaceOrStatics(_crash.statics, _crash2.default);
      this.database = this._appNamespaceOrStatics(_database.statics, _database2.default);
      this.fabric = {
        crashlytics: this._appNamespaceOrStatics(_crashlytics.statics, _crashlytics2.default)
      };
      this.firestore = this._appNamespaceOrStatics(_firestore.statics, _firestore2.default);
      this.links = this._appNamespaceOrStatics(_links.statics, _links2.default);
      this.messaging = this._appNamespaceOrStatics(_messaging.statics, _messaging2.default);
      this.perf = this._appNamespaceOrStatics(_perf.statics, _perf2.default);
      this.storage = this._appNamespaceOrStatics(_storage.statics, _storage2.default);
      this.utils = this._appNamespaceOrStatics(_utils2.statics, _utils3.default);
    }

    _createClass(FirebaseCore, [{
      key: "_initializeNativeApps",
      value: function _initializeNativeApps() {
        for (var i = 0, len = FirebaseCoreModule.apps.length; i < len; i++) {
          var app = FirebaseCoreModule.apps[i];

          var options = _extends({}, app);

          delete options.name;
          _internals2.default.APPS[app.name] = new _firebaseApp2.default(app.name, options);

          _internals2.default.APPS[app.name]._initializeApp(true);
        }
      }
    }, {
      key: "initializeApp",
      value: function initializeApp(options, name) {
        if (name && !(0, _utils.isString)(name)) {
          throw new Error(_internals2.default.STRINGS.ERROR_INIT_STRING_NAME);
        }

        var _name = (name || _internals2.default.STRINGS.DEFAULT_APP_NAME).toUpperCase();

        if (_internals2.default.APPS[_name]) {
          console.warn(_internals2.default.STRINGS.WARN_INITIALIZE_DEPRECATION);
          return _internals2.default.APPS[_name];
        }

        if (!(0, _utils.isObject)(options)) {
          throw new Error(_internals2.default.STRINGS.ERROR_INIT_OBJECT);
        }

        if (!options.apiKey) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('apiKey'));
        }

        if (!options.appId) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('appId'));
        }

        if (!options.databaseURL) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('databaseURL'));
        }

        if (!options.messagingSenderId) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('messagingSenderId'));
        }

        if (!options.projectId) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('projectId'));
        }

        if (!options.storageBucket) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('storageBucket'));
        }

        _internals2.default.APPS[_name] = new _firebaseApp2.default(_name, options);

        if (options.databaseURL && options.apiKey) {
          _internals2.default.APPS[_name]._initializeApp();
        }

        return _internals2.default.APPS[_name];
      }
    }, {
      key: "app",
      value: function app(name) {
        var _name = name ? name.toUpperCase() : _internals2.default.STRINGS.DEFAULT_APP_NAME;

        var app = _internals2.default.APPS[_name];
        if (!app) throw new Error(_internals2.default.STRINGS.ERROR_APP_NOT_INIT(_name));
        return app;
      }
    }, {
      key: "_subscribeForDistribution",
      value: function _subscribeForDistribution(eventName, nativeEmitter) {
        if (!this._nativeSubscriptions[eventName]) {
          nativeEmitter.addListener(eventName, function (event) {
            if (event.appName) {
              _internals2.default.SharedEventEmitter.emit(event.appName + "-" + eventName, event);
            } else {
              _internals2.default.SharedEventEmitter.emit(eventName, event);
            }
          });
          this._nativeSubscriptions[eventName] = true;
        }
      }
    }, {
      key: "_appNamespaceOrStatics",
      value: function _appNamespaceOrStatics(statics, InstanceClass) {
        var _this = this;

        var namespace = InstanceClass._NAMESPACE;

        var getNamespace = function getNamespace(app) {
          var _app = app;
          if (_app && !(_app instanceof _firebaseApp2.default)) throw new Error(_internals2.default.STRINGS.ERROR_NOT_APP(namespace));else if (!_app) _app = _this.app(_internals2.default.STRINGS.DEFAULT_APP_NAME);
          var firebaseApp = _internals2.default.APPS[_app._name];

          if (namespace === 'crashlytics') {
            return firebaseApp.fabric[namespace](_app);
          }

          return firebaseApp[namespace](_app);
        };

        return _extends(getNamespace, statics, {
          nativeModuleExists: !!_reactNative.NativeModules[InstanceClass._NATIVE_MODULE]
        });
      }
    }, {
      key: "_getOrSetNativeEmitter",
      value: function _getOrSetNativeEmitter(name, nativeModule) {
        if (this._nativeEmitters[name]) {
          return this._nativeEmitters[name];
        }

        return this._nativeEmitters[name] = new _reactNative.NativeEventEmitter(nativeModule);
      }
    }, {
      key: "apps",
      get: function get() {
        return Object.values(_internals2.default.APPS);
      }
    }]);

    return FirebaseCore;
  }();

  exports.default = new FirebaseCore();
});