__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _ = require(_dependencyMap[1], "./");

  var _AdRequest = require(_dependencyMap[2], "./AdRequest");

  var _AdRequest2 = _interopRequireDefault(_AdRequest);

  var _utils = require(_dependencyMap[3], "../../utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var FirebaseAdMob = _reactNative.NativeModules.RNFirebaseAdMob;
  var subscriptions = [];

  var Interstitial = function () {
    function Interstitial(admob, adUnit) {
      var _this = this;

      _classCallCheck(this, Interstitial);

      this._onInterstitialEvent = function (event) {
        var eventType = "interstitial:" + _this.adUnit + ":" + event.type;

        var emitData = _extends({}, event);

        switch (event.type) {
          case 'onAdLoaded':
            _this.loaded = true;
            break;

          case 'onAdFailedToLoad':
            emitData = (0, _utils.nativeToJSError)(event.payload.code, event.payload.message);
            emitData.type = event.type;
            break;

          default:}

        _this.admob.emit(eventType, emitData);

        _this.admob.emit("interstitial:" + _this.adUnit + ":*", emitData);
      };

      if (_reactNative.Platform.OS === 'ios') {
        FirebaseAdMob.clearInterstitial(adUnit);
      }

      for (var i = 0, len = subscriptions.length; i < len; i++) {
        subscriptions[i].remove();
      }

      subscriptions = [];
      this.admob = admob;
      this.adUnit = adUnit;
      this.loaded = false;
      this.admob.removeAllListeners("interstitial_" + adUnit);
      this.admob.on("interstitial_" + adUnit, this._onInterstitialEvent);
    }

    _createClass(Interstitial, [{
      key: "loadAd",
      value: function loadAd(request) {
        var adRequest = request;

        if (!adRequest || !Object.keys(adRequest)) {
          adRequest = new _AdRequest2.default().addTestDevice().build();
        }

        return FirebaseAdMob.interstitialLoadAd(this.adUnit, adRequest);
      }
    }, {
      key: "isLoaded",
      value: function isLoaded() {
        return this.loaded;
      }
    }, {
      key: "show",
      value: function show() {
        if (this.loaded) {
          FirebaseAdMob.interstitialShowAd(this.adUnit);
        }
      }
    }, {
      key: "on",
      value: function on(eventType, listenerCb) {
        if (!_.statics.EventTypes[eventType]) {
          console.warn("Invalid event type provided, must be one of: " + Object.keys(_.statics.EventTypes).join(', '));
          return null;
        }

        var sub = this.admob.on("interstitial:" + this.adUnit + ":" + eventType, listenerCb);
        subscriptions.push(sub);
        return sub;
      }
    }]);

    return Interstitial;
  }();

  exports.default = Interstitial;
});