__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _ModuleBase2 = require(_dependencyMap[0], "./../../utils/ModuleBase");

  var _ModuleBase3 = _interopRequireDefault(_ModuleBase2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var RemoteConfig = function (_ModuleBase) {
    _inherits(RemoteConfig, _ModuleBase);

    function RemoteConfig(firebaseApp) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, RemoteConfig);

      var _this = _possibleConstructorReturn(this, (RemoteConfig.__proto__ || Object.getPrototypeOf(RemoteConfig)).call(this, firebaseApp, options));

      _this._developerModeEnabled = false;
      return _this;
    }

    _createClass(RemoteConfig, [{
      key: "_nativeValueToJS",
      value: function _nativeValueToJS(nativeValue) {
        return {
          source: nativeValue.source,
          val: function val() {
            if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;
            if (nativeValue.numberValue !== null && (nativeValue.stringValue == null || nativeValue.stringValue === '' || "" + nativeValue.numberValue === nativeValue.stringValue)) return nativeValue.numberValue;
            if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;
            return nativeValue.stringValue;
          }
        };
      }
    }, {
      key: "enableDeveloperMode",
      value: function enableDeveloperMode() {
        if (!this._developerModeEnabled) {
          this.log.debug('Enabled developer mode');

          this._native.enableDeveloperMode();

          this._developerModeEnabled = true;
        }
      }
    }, {
      key: "fetch",
      value: function fetch(expiration) {
        if (expiration !== undefined) {
          this.log.debug("Fetching remote config data with expiration " + expiration.toString());
          return this._native.fetchWithExpirationDuration(expiration);
        }

        this.log.debug('Fetching remote config data');
        return this._native.fetch();
      }
    }, {
      key: "activateFetched",
      value: function activateFetched() {
        this.log.debug('Activating remote config');
        return this._native.activateFetched();
      }
    }, {
      key: "getValue",
      value: function getValue(key) {
        return this._native.getValue(key || '').then(this._nativeValueToJS);
      }
    }, {
      key: "getValues",
      value: function getValues(keys) {
        var _this2 = this;

        return this._native.getValues(keys || []).then(function (nativeValues) {
          var values = {};

          for (var i = 0, len = keys.length; i < len; i++) {
            values[keys[i]] = _this2._nativeValueToJS(nativeValues[i]);
          }

          return values;
        });
      }
    }, {
      key: "getKeysByPrefix",
      value: function getKeysByPrefix(prefix) {
        return this._native.getKeysByPrefix(prefix);
      }
    }, {
      key: "setDefaults",
      value: function setDefaults(defaults) {
        this._native.setDefaults(defaults);
      }
    }, {
      key: "setDefaultsFromResource",
      value: function setDefaultsFromResource(resource) {
        this._native.setDefaultsFromResource(resource);
      }
    }]);

    return RemoteConfig;
  }(_ModuleBase3.default);

  RemoteConfig._NAMESPACE = 'config';
  RemoteConfig._NATIVE_MODULE = 'RNFirebaseRemoteConfig';
  exports.default = RemoteConfig;
  var statics = exports.statics = {};
});