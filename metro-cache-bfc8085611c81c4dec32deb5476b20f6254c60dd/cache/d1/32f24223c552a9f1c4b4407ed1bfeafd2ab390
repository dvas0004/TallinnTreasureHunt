__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = createPersistoid;

  var _constants = require(_dependencyMap[0], './constants');

  function createPersistoid(config) {
    var blacklist = config.blacklist || null;
    var whitelist = config.whitelist || null;
    var transforms = config.transforms || [];
    var throttle = config.throttle || 0;
    var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : _constants.KEY_PREFIX) + config.key;
    var storage = config.storage;
    var serialize = config.serialize === false ? function (x) {
      return x;
    } : defaultSerialize;
    var lastState = {};
    var stagedState = {};
    var keysToProcess = [];
    var timeIterator = null;
    var writePromise = null;

    var update = function update(state) {
      Object.keys(state).forEach(function (key) {
        var subState = state[key];
        if (!passWhitelistBlacklist(key)) return;
        if (lastState[key] === state[key]) return;
        if (keysToProcess.indexOf(key) !== -1) return;
        keysToProcess.push(key);
      });

      if (timeIterator === null) {
        timeIterator = setInterval(processNextKey, throttle);
      }

      lastState = state;
    };

    function processNextKey() {
      if (keysToProcess.length === 0) {
        if (timeIterator) clearInterval(timeIterator);
        timeIterator = null;
        return;
      }

      var key = keysToProcess.shift();
      var endState = transforms.reduce(function (subState, transformer) {
        return transformer.in(subState, key);
      }, lastState[key]);
      if (typeof endState !== 'undefined') stagedWrite(key, endState);
    }

    function stagedWrite(key, endState) {
      try {
        stagedState[key] = serialize(endState);
      } catch (err) {
        console.error('redux-persist/createPersistoid: error serializing state', err);
      }

      if (keysToProcess.length === 0) {
        Object.keys(stagedState).forEach(function (key) {
          if (lastState[key] === undefined) {
            delete stagedState[key];
          }
        });
        writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
      }
    }

    function passWhitelistBlacklist(key) {
      if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;
      if (blacklist && blacklist.indexOf(key) !== -1) return false;
      return true;
    }

    function onWriteFail(err) {
      if (err && process.env.NODE_ENV !== 'production') {
        console.error('Error storing data', err);
      }
    }

    var flush = function flush() {
      while (keysToProcess.length !== 0) {
        processNextKey();
      }

      return writePromise || Promise.resolve();
    };

    return {
      update: update,
      flush: flush
    };
  }

  function defaultSerialize(data) {
    return JSON.stringify(data);
  }
});