__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _internals = require(_dependencyMap[0], "../../utils/internals");

  var _internals2 = _interopRequireDefault(_internals);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var User = function () {
    function User(auth, user) {
      _classCallCheck(this, User);

      this._auth = auth;
      this._user = user;
    }

    _createClass(User, [{
      key: "delete",
      value: function _delete() {
        return this._auth._interceptUndefinedUserValue(this._auth._native.delete());
      }
    }, {
      key: "getIdToken",
      value: function getIdToken() {
        var forceRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return this._auth._native.getToken(forceRefresh);
      }
    }, {
      key: "linkWithCredential",
      value: function linkWithCredential(credential) {
        return this._auth._interceptUserValue(this._auth._native.link(credential.providerId, credential.token, credential.secret));
      }
    }, {
      key: "reauthenticateWithCredential",
      value: function reauthenticateWithCredential(credential) {
        return this._auth._interceptUndefinedUserValue(this._auth._native.reauthenticate(credential.providerId, credential.token, credential.secret));
      }
    }, {
      key: "reload",
      value: function reload() {
        return this._auth._interceptUndefinedUserValue(this._auth._native.reload());
      }
    }, {
      key: "sendEmailVerification",
      value: function sendEmailVerification(actionCodeSettings) {
        return this._auth._interceptUndefinedUserValue(this._auth._native.sendEmailVerification(actionCodeSettings));
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return _extends({}, this._user);
      }
    }, {
      key: "unlink",
      value: function unlink(providerId) {
        return this._auth._interceptUserValue(this._auth._native.unlink(providerId));
      }
    }, {
      key: "updateEmail",
      value: function updateEmail(email) {
        return this._auth._interceptUndefinedUserValue(this._auth._native.updateEmail(email));
      }
    }, {
      key: "updatePassword",
      value: function updatePassword(password) {
        return this._auth._interceptUndefinedUserValue(this._auth._native.updatePassword(password));
      }
    }, {
      key: "updateProfile",
      value: function updateProfile() {
        var updates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._auth._interceptUndefinedUserValue(this._auth._native.updateProfile(updates));
      }
    }, {
      key: "getToken",
      value: function getToken() {
        var forceRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        console.warn('Deprecated firebase.User.prototype.getToken in favor of firebase.User.prototype.getIdToken.');
        return this._auth._native.getToken(forceRefresh);
      }
    }, {
      key: "linkAndRetrieveDataWithCredential",
      value: function linkAndRetrieveDataWithCredential() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkAndRetrieveDataWithCredential'));
      }
    }, {
      key: "linkWithPhoneNumber",
      value: function linkWithPhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPhoneNumber'));
      }
    }, {
      key: "linkWithPopup",
      value: function linkWithPopup() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPopup'));
      }
    }, {
      key: "linkWithRedirect",
      value: function linkWithRedirect() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithRedirect'));
      }
    }, {
      key: "reauthenticateWithPhoneNumber",
      value: function reauthenticateWithPhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPhoneNumber'));
      }
    }, {
      key: "reauthenticateWithPopup",
      value: function reauthenticateWithPopup() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPopup'));
      }
    }, {
      key: "reauthenticateWithRedirect",
      value: function reauthenticateWithRedirect() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithRedirect'));
      }
    }, {
      key: "updatePhoneNumber",
      value: function updatePhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'updatePhoneNumber'));
      }
    }, {
      key: "displayName",
      get: function get() {
        return this._user.displayName || null;
      }
    }, {
      key: "email",
      get: function get() {
        return this._user.email || null;
      }
    }, {
      key: "emailVerified",
      get: function get() {
        return this._user.emailVerified || false;
      }
    }, {
      key: "isAnonymous",
      get: function get() {
        return this._user.isAnonymous || false;
      }
    }, {
      key: "phoneNumber",
      get: function get() {
        return this._user.phoneNumber || null;
      }
    }, {
      key: "photoURL",
      get: function get() {
        return this._user.photoURL || null;
      }
    }, {
      key: "providerData",
      get: function get() {
        return this._user.providerData;
      }
    }, {
      key: "providerId",
      get: function get() {
        return this._user.providerId;
      }
    }, {
      key: "uid",
      get: function get() {
        return this._user.uid;
      }
    }, {
      key: "refreshToken",
      get: function get() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_PROPERTY('User', 'refreshToken'));
      }
    }]);

    return User;
  }();

  exports.default = User;
});